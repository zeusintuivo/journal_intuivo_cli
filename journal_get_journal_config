#!/bin/bash #dependency
# package:journal_cli
# @author Zeus Intuivo <zeus@intuivo.com>
#
# TODO . TO have this in an options box
export JOURNAL_HOME="/Users/Sites" # <-- I used for mac  before Catalina
JOURNAL_HOME="${HOME}/Sites" # <-- I used for mac before Catalina
JOURNAL_HOME="${HOME}/_" # <-- I used for mac. it will create ${HOME}/_/journal directory
JOURNAL_VERSION="1.0.1"
CURRENTDATE=`date +%Y%m%d`
CURRENT_LONG_DATE=`date`
JOURNAL_PROJECT_WORKING_ON="${PWD}"

#KEY?
#KEYS Override?
      [[ -z "${GIT_USER_NAME:-}" ]] && GIT_USER_NAME=$(command git config user.name 2> /dev/null)

      if [ -f .temp_keys ] ; then
        LOAD_TEMP_KEYS=$(<.temp_keys)
        eval "${LOAD_TEMP_KEYS}"
        if [[ ! -z "${SSH_KEY}" ]] && [[ "${GITUSER}" != "${GIT_USER_NAME}" ]] ; then
          sshswitchkey "${SSH_KEY}"
          GIT_USER_NAME=$(command git config user.name 2> /dev/null)
        fi
      fi



CASE_SENSITIVE_CONFIRMATION=""
DISK_CASE_SENSITIVE=1
[[ -z "${FOUND_DIR_JOURNAL}" ]] && . journal_find_journal_dir
{ # try
  [[ -e "${FOUND_DIR_JOURNAL}/journal_get_case_in_sensitive"  ]] && . "${FOUND_DIR_JOURNAL}/journal_get_case_in_sensitive"
} || { # catch
  DISK_CASE_SENSITIVE=1
}
load_struct_testing_wget(){
    local provider="${HOME}/_/clis/execute_command_intuivo_cli/struct_testing"
    # shellcheck disable=SC1090
    [   -e "${provider}"  ] && source "${provider}"
		( ( ! command -v wget >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing. You need wget installed \n \n " && exit 69; )
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

# #
# # Case Sensitve process - start
# #
#         # Repeated in fat_letters, bigger_letters, struct_testing, journal_get_changed_files_list_by_me, bigger_letters, show_files_by_size_recursively, gefund
#         function trim_start_space() {
#             sed -e 's/^[[:space:]]*//' | sed 's/^\ //g' | sed 's/^\t//g'
#         }
#         function trim_end_space() {
#             sed -e 's/[[:space:]]*$//' | sed 's/\ $//g' | sed 's/\t$//g'
#         }
#         function trim() {
#             trim_start_space | trim_end_space
#         }

# [[ -z "${CASE_SENSITIVE_CONFIRMATION}" ]] && {
#   CASE_SENSITIVE_CONFIRMATION=$(diskutil info disk0s2 | grep AES | cut -d: -f2 | trim)   # mac specicifc diskutil function
# }

# [[ -n "${CASE_SENSITIVE_CONFIRMATION}" ]] && {
#   [[ "${CASE_SENSITIVE_CONFIRMATION}" == "Yes" ]] && DISK_CASE_SENSITIVE=1
#   [[ "${CASE_SENSITIVE_CONFIRMATION}" == "Ja" ]] && DISK_CASE_SENSITIVE=1
# }

# # confirm that is

# #
# # Case Sensitive process - end
#

function msg_bullet() {
	# shellcheck disable=SC2154
	echo -e "${blue23} • ${blue30} ${*} ${reset}"
} # msg_bullet
function msg_error() {
	# shellcheck disable=SC2154
	echo -e "${red} ERROR ! ${*} ${reset}"
} # msg_error
function msg_red() {
	# shellcheck disable=SC2154
	echo -e "${red} • ${orange209} ${*} ${reset}"
} # msg_red
function msg_warning() {
	# shellcheck disable=SC2154
	echo -e "${yellow220} WARNING ! ${*} ${reset}"
} # msg_warning
function pure_check() {
  local char string="${*}"
  local string_length="${#string}"     # bash get string length
  # echo "hello"       | sed 's/./&,/2'  # how to a , in position two using sed
  local new_string=""
  # msg_bullet "    - pure_checking „${string}” ";rs
  if [ -z "${string}" ] ; then
  {
    return 0;
  }
  fi
  while read -rn 1 char ; do
      new_string="${new_string}.${char}"
  done <<< "${string}"
  local new_string_length="${#new_string}"     # bash get string length
  local _expected_length=$((string_length))
  _expected_length=$((_expected_length*2))
  _expected_length=$((_expected_length-3))
  if ((_expected_length != new_string_length)) ; then
  {
    # msg_error "String ${string_length}:‘${string}’ Is not pure ${_expected_length}!=${new_string_length}„${new_string}” ";
    return 1
  }
  fi
  # msg_bullet "„${string}” ";
  return 0
} # pure_check
function msg_quote() {
  local first_argument to_quote
  IFS='|' read -r first_argument to_quote <<< "${*}"
  pure_check "${DESCRIPTION}"
  # shellcheck disable=SC1111
  msg_bullet "    - ${first_argument} „${to_quote}” ";
} # msg_quote
function msg_choice() {
  local name_of_variable="${1}"
  # shellcheck disable=SC2155
  local value
  value=$(eval "echo \$${name_of_variable}")
  (( value )) && {
    # shellcheck disable=SC2154
    echo -e "${voilet}${name_of_variable}${yellow220}:${green} ON ${yellow220}== ${blue32}${value} ${yellow220}:${reset}"
  }
  ( ! (( value )) ) && {
    # shellcheck disable=SC2154
    echo -e "${voilet}${name_of_variable}${yellow220}:${red} OFF ${yellow220}== ${orange208}${value} ${yellow220}:${reset}"
  }
} # msg_choice




JOURNAL_DEBUG_PROCESS=0
[[ "${*}" == *"--version"* ]] && echo "${JOURNAL_VERSION}" && exit 0
[[ "${*}" == *"--help"* ]] &&  echo "usage: all journal commands [--help][--version][--debug]"
[[ "${*}" == *"--debug"* ]] && JOURNAL_DEBUG_PROCESS=1
(( JOURNAL_DEBUG_PROCESS )) && msg_choice JOURNAL_DEBUG_PROCESS
(( DISK_CASE_SENSITIVE )) && msg_choice DISK_CASE_SENSITIVE


