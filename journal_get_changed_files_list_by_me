#!/bin/bash #dependency
# package:journal_cli
# @author Zeus Intuivo <zeus@intuivo.com>
#
[[ -z "${FOUND_DIR_JOURNAL}" ]] && . journal_find_journal_dir
[[ -z "${BRANCH_MERGE_AGAINST}" ]] && . $FOUND_DIR_JOURNAL/journal_get_branch_merge_against
[[ -z "${CURBRANCH}" ]] && . $FOUND_DIR_JOURNAL/journal_get_current_branch
SAVEDBRANCH="${CURBRANCH}"
  CHANGED_BY_ME=""
  ME_NAME=$(git config user.name)
  ME_EMAIL=$(git config user.email)
  ME_AUTHOR="Author: ${ME_NAME} <${ME_EMAIL}>"
  FILES_EXPANDED=""

function remove_empty_lines(){
  sed '/^$/d'
}
                          # duplicated in execute_command.sh:55
                          function trim_start_space() {
                              sed -e 's/^[[:space:]]*//' | sed 's/^\ //g' | sed 's/^\t//g'
                          }
                          function trim_end_space() {
                              sed -e 's/[[:space:]]*$//' | sed 's/\ $//g' | sed 's/\t$//g'
                          }
                          function trim() {
                              trim_start_space | trim_end_space
                          }
function file_author_last_commit(){
  git log -n 1 -- """${1}""" | grep --color=no Author
}
function file_last_commit(){
  # git log -n 1 -- """${1}""" | egrep --color=no -v "Author: "|  egrep  --color=no -v "Date: " | grep --color=no -v "commit " | remove_empty_lines | trim
  git log -n 1 -- """${1}""" | grep -E --color=no -v "Author: "|  grep  -E --color=no -v "Date: " | grep --color=no -v "commit " | remove_empty_lines | trim
}


function _file_save_files_worker(){
  #
  #
  # "${CURBRANCH}"
  # "${TARGETBASEBRANCH}"  BRANCH_MERGE_AGAINST
  #
  #
  local -i FILENAME_LENGTH=0
  local -i BIGGEST_FILENAME_LENGTH=0
  local -i AUTHOR_LENGTH=0
  local -i BIGGEST_AUTHOR_LENGTH=0
  local local_JOURNAL_PULL_REQUEST_DIRECTORY="${1}"
  enforce_variable_with_value local_JOURNAL_PULL_REQUEST_DIRECTORY "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"

  # CHANGED_FILES expected global
  # shellcheck disable=SC2153
  enforce_variable_with_value CHANGED_FILES "${CHANGED_FILES}"

	while read -r CHANGED_FILE; do
  {
    # if not empty line
    [[ -z "${CHANGED_FILE}" ]] && continue
    # if file exists ...like deleted...it will still show in the git diff per se
  	if [ -f "${CHANGED_FILE}" ] ; then
    {
    	  echo -e "${yellow220} ${CHANGED_FILE} ${reset}"
        echo "CHANGED: ${CHANGED_FILE}" >> "${FILENAME_PULL_REQUEST_JOURNAL}"
        FILE_LAST_AUTHOR=$(file_author_last_commit """${CHANGED_FILE}""")
        FILE_LAST_COMMIT=$(file_last_commit """${CHANGED_FILE}""")
        FILENAME_LENGTH=${#CHANGED_FILE}        # get strlen string length
        if [ ${FILENAME_LENGTH} -gt ${BIGGEST_FILENAME_LENGTH} ] ;  then
        {
          BIGGEST_FILENAME_LENGTH=${FILENAME_LENGTH}
        }
        fi
        AUTHOR_LENGTH=${#FILE_LAST_AUTHOR}       # get strlen string length
        if [ ${AUTHOR_LENGTH} -gt ${BIGGEST_AUTHOR_LENGTH} ] ;  then
        {
          BIGGEST_AUTHOR_LENGTH=${AUTHOR_LENGTH}
        }
        fi
      	# Copy files recursively keep directories REF: http://stackoverflow.com/questions/1650164/bash-copy-named-files-recursively-preserving-folder-structure
  			# check operation systems
        FILES_EXPANDED="${FILES_EXPANDED}
${CHANGED_FILE}|${FILE_LAST_AUTHOR}|${FILE_LAST_COMMIT}"
        if [[ "x${ME_AUTHOR}" == "x${FILE_LAST_AUTHOR}" ]] ; then
        {
          CHANGED_BY_ME="${CHANGED_BY_ME}
${CHANGED_FILE}|${FILE_LAST_AUTHOR}|${FILE_LAST_COMMIT}"
        }
        fi

        # check operation systems- copy start
  			(
  			  if [[ "$(uname)" == "Darwin" ]] ; then
          {
  			    # Do something under Mac OS X platform
            msg_bullet rsync -R "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
  				  rsync -R "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
            if [[ "x${ME_AUTHOR}" == "x${FILE_LAST_AUTHOR}" ]] ; then
            {
              msg_bullet rsync -R "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
              rsync -R "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
            }
            fi
  			  }
          elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
          {
  			    # Do something under GNU/Linux platform
  			    msg_bullet cp -a --parents "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
            cp -a --parents "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
            # echo "cp -a --parents "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}""
            if [[ "x${ME_AUTHOR}" == "x${FILE_LAST_AUTHOR}" ]] ; then
            {
              msg_bullet cp -a --parents "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
              cp -a --parents "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
            }
            fi
  			  }
          elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
          {
  			    # Do something under Windows NT platform
  			    msg_bullet xcopy /s   "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
            xcopy /s   "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}"
            if [[ "x${ME_AUTHOR}" == "x${FILE_LAST_AUTHOR}" ]] ; then
            {
              msg_bullet xcopy /s   "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
              xcopy /s   "${CHANGED_FILE}" "${local_JOURNAL_PULL_REQUEST_DIRECTORY}_only_me"
            }
            fi
  			    # nothing here
          }
  			  fi
  			)
        # check operation systems - copy end
      }
  		else
      {
  			echo -e "${red} ${CHANGED_FILE} -deleted or renamed- ${reset}"
        echo "DELETED OR " >> "${FILENAME_PULL_REQUEST_JOURNAL}"
        echo "RENAMED: ${CHANGED_FILE}" >> "${FILENAME_PULL_REQUEST_JOURNAL}"
      }
  		fi
	}
  done <<< "${CHANGED_FILES}"
} # end _file_save_files_worker function



enforce_variable_with_value JOURNAL_PULL_REQUEST_DIRECTORY "${JOURNAL_PULL_REQUEST_DIRECTORY}"
_file_save_files_worker "${JOURNAL_PULL_REQUEST_DIRECTORY}"

function _file_save_files() {
  local _tmp_current_time
  _tmp_current_time="$(date +%Y%m%d%H%M)"
      enforce_variable_with_value _tmp_current_time "${_tmp_current_time}"
  local -i _err
  msg_bullet git stash save "${_tmp_current_time}"
  local msg_stash_saved=$(git stash save "${_tmp_current_time}" 2>&1)
  _err=$?
                if [ ${_err} -ne 0 ] ; then
                {
                  msg_error " git stash save \"${_tmp_current_time}\" failed to save stash"
                }
                fi
  if [[ "${msg_stash_saved}" == "No local changes to save" ]] ; then
  {
      msg_bullet "${msg_stash_saved}"
  }
  fi

  if [ ${_err} -eq 0 ] ; then
  {
    msg_bullet git checkout "${BRANCH_MERGE_AGAINST}"
    git checkout "${BRANCH_MERGE_AGAINST}"
    _err=$?
                if [ ${_err} -ne 0 ] ; then
                {
                  msg_error " git checkout \"${BRANCH_MERGE_AGAINST}\" failed to checkout"
                }
                fi
    if [ ${_err} -eq 0 ] ; then
    {
      MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY=$(echo "${JOURNAL_PULL_REQUEST_DIRECTORY}" | sed 's/\/pr_/'"\/von_"'/')
      enforce_variable_with_value MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY "${MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY}"
      echo -e "\n Merged Against Files NOW ${MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY}"
      mkdir -p "${MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY}"
      . "$FOUND_DIR_JOURNAL"/journal_get_current_branch
      enforce_variable_with_value CURBRANCH "${CURBRANCH}"
      msg_bullet "_file_save_files_worker \"${MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY}\""
      _file_save_files_worker "${MERGE_AGAINST_JOURNAL_PULL_REQUEST_DIRECTORY}"


      enforce_variable_with_value SAVEDBRANCH "${SAVEDBRANCH}"
      msg_bullet git checkout "${SAVEDBRANCH}"
      git checkout "${SAVEDBRANCH}"
      _err=$?
                      if [ ${_err} -ne 0 ] ; then
                      {
                        msg_error " git checkout \"${SAVEDBRANCH}\" failed to checkout"
                      }
                      fi
      if [ ${_err} -eq 0 ] ; then
      {
        . "$FOUND_DIR_JOURNAL"/journal_get_current_branch
        enforce_variable_with_value CURBRANCH "${CURBRANCH}"

        if [[ "${msg_stash_saved}" != "No local changes to save" ]] ; then
        {
          local -i get_pop
          local stash_name='';
          local stash_list=$(git stash list | grep '{')
          if  [[ -n ${stash_list} ]] ; then
          {
            if grep "${_tmp_current_time}" <<<"${stash_list}" >/dev/null 2>&1 ; then
            {
              stash_name=$(grep "${_tmp_current_time}" <<<"${stash_list}" | head -1 | cut -d: -f2-)
              get_pop=$(grep "${_tmp_current_time}" <<<"${stash_list}" | head -1 | cut -d"{" -f2  | cut -d"}" -f1)
            }
            fi

            if [[ -n ${get_pop} ]] && [[ -n ${stash_name} ]] ; then
            {
              msg_bullet git stash apply "${get_pop}" for  "${stash_name}"
              git stash apply "${get_pop}"
            }
            else
            {
              msg_bullet git stash apply "${_tmp_current_time}"  for  "${stash_name}"
              git stash apply "${_tmp_current_time}"
            }
            fi
            _err=$?
            if [ ${_err} -ne 0 ] ; then
            {
              msg_error " git stash apply \"${_tmp_current_time}\" failed to apply stash for ${stash_name}: Err: ${_err}  "
              if [[ -e commit_exception.list ]] ; then
              {
                local -i length_commit_exception_list=$(wc -l<commit_exception.list)
                if [[ ${length_commit_exception_list} -gt 100 ]] ; then
                {
                  msg_warning "unstage_exception_list ... WHAT!! this commit_exception.list file has ${length_commit_exception_list} !! files you might consider making them less??"
                }
                fi
                if [[ ${length_commit_exception_list} -gt 30 ]] ; then
                {
                  msg_warning "unstage_exception_list ... this could take a while commit_exception.list file has ${length_commit_exception_list}"
                }
                fi
                if [[ ${length_commit_exception_list} -gt 10 ]] ; then
                {
                  msg_bullet "unstage_exception_list ... unstaging ${length_commit_exception_list}"
                }
                fi
                unstage_exception_list
              }
              fi
             }
            fi
            if [ ${_err} -eq 0 ] ; then
            {
              local stash_list=$(git stash list | grep '{')
              if  [[ -n ${stash_list} ]] ; then
              {
                if grep "${_tmp_current_time}" <<<"${stash_list}" >/dev/null 2>&1 ; then
                {
                  stash_name=$(grep "${_tmp_current_time}" <<<"${stash_list}" | head -1 | cut -d: -f2-)
                  get_pop=$(grep "${_tmp_current_time}" <<<"${stash_list}" | head -1 | cut -d"{" -f2  | cut -d"}" -f1)
                }
                fi
              }
              fi
              if [[ -n ${get_pop} ]] ; then
              {
                msg_bullet git stash drop -q "${get_pop}" for  "${stash_name}"   # "${_tmp_current_time}"
                git stash drop -q "${get_pop}" #  "${_tmp_current_time}"
                _err=$?
                if [ ${_err} -ne 0 ] ; then
                {
                  msg_error " git stash drop -q \"${get_pop}\" failed to drop stash ${get_pop}: for ${stash_name} -${_tmp_current_time}: Err: ${_err}  "
                }
                fi
              }
              fi
            }
            fi
          }
          fi
        }
        fi
      }
      fi

    }
    fi

  }
  fi
	#echo "${CHANGED_FILES}"


} # end _file_save_files_worker function
	# shellcheck disable=SC2154

	msg_bullet _file_save_files
	_file_save_files
	echo -e "${green}++++ ${reset}"