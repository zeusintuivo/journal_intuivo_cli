#!/usr/bin/env bash #dependency
# package:journal_cli
# @author Zeus Intuivo <zeus@intuivo.com>
# journal_get_extract_something_trimmed_between
#set -eu
#set -o pipefail
#set -x
# JOURNAL_DEBUG_PROCESS=0
# JOURNAL_DEBUG_PROCESS=1 # TO JOURNAL_DEBUG_PROCESS can be set from command line from journal_config and with --debug
function extract_something_trimmed_between() {

    local PIPED OLDIFS COLORED COUNTER ONEPIPE
    local from1 to2 a filename=""
    local PIPED="";
    local COLORED="";
    local COUNTER=0;
    if [ ! -z "${3}" ] && [[ "${3}" != "--file" ]] ; then  # file argument
        {
            filename="${3}"
        }
    fi

    if [ ! -z "${3}" ] || [ ! -z "${4}" ] && [[ "${3}" == "--file" ]] ; then  # file argument
        {
            filename="${4}"
        }
    fi

    if [ ! -z "${filename}" ] && [ ! -e "${filename}" ] ; then
        {
            echo "ERROR extract_something_trimmed_between(${*}) filename:${filename}: is does not exists!"
            exit 69
        }
    fi

    if [ ! -z "${filename}" ] || [ -t 0 ]; then # Do stuff with NO PIPE
        {
            # Terminal input (keyboard) - interactive
            PIPED=""
        }
    else
        {

            # File or pipe input - non-interactive
            PIPED="YES"
            # REF: http://stackoverflow.com/questions/2746553/bash-script-read-values-from-stdin-pipe
            # read PIPED #TOOD Works on mac osx, pending to test in linux and windows
            PIPED=''
            # REF: https://stackoverflow.com/questions/7314044/use-bash-to-read-line-by-line-and-keep-space
            # REF: http://www.unix.com/shell-programming-and-scripting/58611-resetting-ifs-variable.html
            OLDIFS=$IFS            # resetting IFS variable
            IFS=''                 # to read line by line and keep space
            IFS= read -r ONEPIPE   # to avoid interpretation of backslashes.
            PIPED="${ONEPIPE}"
            [ ! -z "$PIPED" ] && COUNTER=$((COUNTER+1))

            while read ONEPIPE
            do

                PIPED="${PIPED}
                ${ONEPIPE}"
                COUNTER=$((COUNTER+1))
            done

            if [ $COUNTER -eq 0 ]; then
                IFS=$OLDIFS
                return 1;   # If there is not contents then exit silently with error code 1
            fi

            #action="${ONEPIPE/ /⃝}"  # replace value inside string substitution expresion bash
            # TEST: echo "COUNTER: ${COUNTER}";echo "PIDED: ${PIPED}"; exit 0;
            IFS=$OLDIFS
        }
    fi



    if [ -z "$PIPED" ] || [ ! -z "${filename}" ]; then  # Do stuff with NO PIPE
        {

            PIPED=""

            # Execution part - Start
            # Sample use:
            #             echo "'continue_confirm_start.m  033[0m from develop.BASEBRANCH.' " > .description
            #             extract_something_trimmed_between "from" ".BASEBRANCH." .description

            # Technique from:
            # REF: https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern
            #test: Working sample
            #from1="If you come"; to2="Example aliases"; a="$(cat ~/.zshrc)"; a="$(echo "${a#*"$from1"}")"; echo "$from1${a%%"$to2"*}$to2"

            from1="${1}";
            to2="${2}";

            if [[ ! -f "${filename}" ]] ; then
                {
                    echo "ERROR !!! Filename: ${filename} does not exist"
                    return 1;
                    #return 0
                }
            fi
            a="$(cat ${filename})";
            a="$(echo "${a#*"$from1"}")";
            #echo "$from1${a%%"$to2"*}$to2" # returns the side handles between
            #echo "${a%%"$to2"*}"  # gets spaces
            echo ${a%%"$to2"*}  # trims spaces
            # Execution part - End

        }
    else               # Do sutff with WITH YES PIPE the contents piped passed
        {

            ##Executiong part - Start
            # Sample use:
            #        cat .description | extract_something_trimmed_between "from" ".BASEBRANCH."
            #        echo "ew_field_autoconfirm_start.m  033[0m from develop.BASEBRANCH.'" | extract_something_trimmed_between "from" ".BASEBRANCH."

            # Technique from:
            # REF: https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern
            #test: Working sample
            #from1="If you come"; to2="Example aliases"; a="$(cat ~/.zshrc)"; a="$(echo "${a#*"$from1"}")"; echo "$from1${a%%"$to2"*}$to2"

            from1="${1}";
            to2="${2}";
            a="${PIPED}";

            a="$(echo "${a#*"$from1"}")";
            #echo "$from1${a%%"$to2"*}$to2" # returns the side handles between
            #echo "${a%%"$to2"*}"  # gets spaces
            echo ${a%%"$to2"*}  # trims spaces
            return 0

            ##Executiong part - End
        }
    fi

} # end function  extract_something_trimmed_between



test_assert_get_develop_from_pipe() {
    #tests assert to get: develop
    #given the file contain this string "t.m  033[0m from develop.BASEBRAN"
    echo "t.m  033[0m from develop.BASEBRANCH." > /tmp/.test_assert_get_develop_from_pipe
    local RESULT=$(cat /tmp/.test_assert_get_develop_from_pipe | extract_something_trimmed_between "from" ".BASEBRANCH.")
    [ -e /tmp/.test_assert_get_develop_from_pipe ] &&  rm /tmp/.test_assert_get_develop_from_pipe
    if [[ "${RESULT}" != "develop" ]] ; then
        {
            echo "ERROR self_test test_assert_get_develop_from_pipe failed! expected «develop» got «${RESULT}»!"
            exit 69
            } else {
            ((JOURNAL_DEBUG_PROCESS)) && echo -e " ◊ ${gray238}${BASH_SOURCE[0]} ->\n  .. ${FUNCNAME[0]}() == ${green}PIPED TEST PASSED${reset}"
        }
    fi

} # end function test_assert_get_develop_from_pipe
test_assert_get_develop_from_pipe

test_assert_obtain_develop_from_file(){
    #test assert to see : develop
    echo "'continue_confirm_start.m  033[0m from develop.BASEBRANCH.' " > /tmp/.test_assert_obtain_develop_from_file
    local RESULT=$(extract_something_trimmed_between "from" ".BASEBRANCH." --file /tmp/.test_assert_obtain_develop_from_file)
    [ -e /tmp/.test_assert_obtain_develop_from_file ] && rm /tmp/.test_assert_obtain_develop_from_file
    if [[ "${RESULT}" != "develop" ]] ; then
        {
            echo "ERROR self_test test_assert_obtain_develop_from_file failed! expected «develop» got «${RESULT}»!"
            exit 69
            } else {
            ((JOURNAL_DEBUG_PROCESS)) && echo -e " ◊ ${gray238}${BASH_SOURCE[0]} ->\n  .. ${FUNCNAME[0]}() == ${green}FILE TEST PASSED${reset}"
        }
    fi
}

test_assert_obtain_develop_from_file


