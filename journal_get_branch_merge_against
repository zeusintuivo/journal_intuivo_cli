#!/bin/bash #dependency
# package:journal_cli
# @author Zeus Intuivo <zeus@intuivo.com>
#
#set -eu
#set -o pipefail
#set -x


function cut_piped_contents_trimed_between() {
  local PIPED COLORED COUNTER ONEPIPE
  local from1 to2 a filename
  PIPED="";
  COLORED="";
  COUNTER=0;

  if [ -t 0 ]; then  # Do stuff with NO PIPE
  {

      PIPED=""

      # Execution part - Start
      # Sample use:
      #             echo "'continue_confirm_start.m  033[0m from develop.BASEBRANCH.' " > .description
      #             cut_piped_contents_trimed_between "from" ".BASEBRANCH." .description

      # Technique from:
      # REF: https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern
      #test: Working sample
      #from1="If you come"; to2="Example aliases"; a="$(cat ~/.zshrc)"; a="$(echo "${a#*"$from1"}")"; echo "$from1${a%%"$to2"*}$to2"

      from1="${1}";
      to2="${2}";
      filename="${3}"
      if [[ ! -f "${filename}" ]] ; then
      {
        echo "ERROR !!! Filename: ${filename} does not exist"
        return 1;
        #return 0
      }
      fi
      a="$(cat ${filename})";
      a="$(echo "${a#*"$from1"}")";
      #echo "$from1${a%%"$to2"*}$to2" # returns the side handles between
      #echo "${a%%"$to2"*}"  # gets spaces
      echo ${a%%"$to2"*}  # trims spaces
      # Execution part - End

  }
  else               # Do sutff with WITH YES PIPE the contents piped passed
  {

      PIPED="YES"
      PIPED=""
      while read ONEPIPE; do
      {

          if [ -z "${PIPED}" ]; then     # When pipe if empty, start var
          {
            PIPED="${ONEPIPE}"
          }
          else                           # When it has something keep adding
          {
            PIPED="${PIPED}
${ONEPIPE}"
          }
          fi
          COUNTER=$((COUNTER+1))
      }
      done
      if [ $COUNTER -eq 0 ]; then   # If there is not contents then exit silently
        return 1;
      fi

      ##Executiong part - Start
      # Sample use:
      #        cat .description | cut_piped_contents_trimed_between "from" ".BASEBRANCH."
      #        echo "ew_field_autoconfirm_start.m  033[0m from develop.BASEBRANCH.'" | cut_piped_contents_trimed_between "from" ".BASEBRANCH."

      # Technique from:
      # REF: https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern
      #test: Working sample
      #from1="If you come"; to2="Example aliases"; a="$(cat ~/.zshrc)"; a="$(echo "${a#*"$from1"}")"; echo "$from1${a%%"$to2"*}$to2"

      from1="${1}";
      to2="${2}";
      a="${PIPED}";
      a="$(echo "${a#*"$from1"}")";
      #echo "$from1${a%%"$to2"*}$to2" # returns the side handles between
      #echo "${a%%"$to2"*}"  # gets spaces
      echo ${a%%"$to2"*}  # trims spaces
      ##Executiong part - End
  }
  fi

}
#test assert to see : develop
#cat .description | cut_piped_contents_trimed_between "from" ".BASEBRANCH."
#echo "ew_field_autoconfirm_start.m  033[0m from develop.BASEBRANCH.'" | cut_piped_contents_trimed_between "from" ".BASEBRANCH."
#exit

#test assert to see : develop
#echo "'continue_confirm_start.m  033[0m from develop.BASEBRANCH.' " > .description
#cut_piped_contents_trimed_between "from" ".BASEBRANCH." .description
#exit


. $FOUND_DIR_JOURNAL/journal_get_current_branch

#
# BRANCH_MERGE_AGAINST - Get branch MERGE AGAINST ..start
#
  echo -e "${blue23} â€¢ ${blue30} Get branch MERGE AGAINST  ${reset}"


  # Saved on git description from ${TARGETBASEBRANCH} _BASEBRANCH_";
  BRANCH_MERGE_AGAINST=$(git config branch.${CURBRANCH}.description | cut_piped_contents_trimed_between "from" "_BASEBRANCH_");   # try git config description "from" branch_name ".BASEBRANCH."
  #?empty still  --look into .description
  if [[ -z "${BRANCH_MERGE_AGAINST}" ]]  && [ -f .description ] ; then                                                      # try cat .description "from" branch_name ".BASEBRANCH.")
    # Saved on .description?
    BRANCH_MERGE_AGAINST=$(cut_piped_contents_trimed_between "from" "_BASEBRANCH_" .description);
  fi

  #?empty still  --look into .gitignore
  if [[ -z "${BRANCH_MERGE_AGAINST}" ]] && [ -f .gitignore ] ; then                                                         # try .gitignore #BRANCH-MERGE-AGAINST:branch_name
    # Saved on .gitignore?
    BRANCH_MERGE_AGAINST=$(cat .gitignore | grep "#BRANCH-MERGE-AGAINST:" | cut -d':' -f2)
  fi

  #?empty still   --default to 'develop'
  if [[ -z "${BRANCH_MERGE_AGAINST}" ]] ; then                                                                              # default to BRANCH-MERGE-AGAINST
    {
      BRANCH_MERGE_AGAINST="develop"
      echo -e " - branch against defaulting to:${BRANCH_MERGE_AGAINST}"
    }
  fi
  echo -e " - branch against:${BRANCH_MERGE_AGAINST}"

  # TODO Saved on a file in .journal file inside the journal/project folder? TODO


#
# BRANCH_MERGE_AGAINST - Get branch MERGE AGAINST ..end
#

